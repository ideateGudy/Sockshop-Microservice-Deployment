name: CI/CD

on:
  # push:
  #   branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Install Azure CLI
      #   run: |
      #     curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Set up Azure CLI
        uses: azure/setup-azure-cli
        with:
          azure-cliversion: latest

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Install helm
        uses: azure/setup-helm@v4.2.0

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Create Azure Storage Account for Terraform State
        run: |
          az storage account create --name "terraform-storage-acc" --resource-group "terraform-sock-rg" --location ${{ vars.REGION }} --sku Standard_LRS

      - name: Create Azure Blob Container for Terraform State
        run: |
          az storage container create --name "tfstate" --account-name "terraform-storage-acc"

      - name: Deploy Terraform
        run: |
          terraform -chdir=infrastructure/ init -backend-config="storage_account_name=terraform-storage-acc" -backend-config="container_name=tfstate" -backend-config="key=terraform.tfstate" -backend-config="resource_group_name=terraform-sock-rg"
          terraform -chdir=infrastructure/ apply --auto-approve
      # terraform -chdir=infrastructure/ init
      - name: Update kubeconfig
        run: |
          az aks get-credentials --resource-group sock-shop-RG --name sock-shop-aks-cluster-test-env
      # az aks get-credentials --resource-group sock-rg --name sock-shop-aks-cluster
      - name: Deploy application
        run: kubectl apply -f ./sockshop-microservices/.

      - name: Deploy Let's Encrypt
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm repo update jetstack
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.15.2 --set crds.enabled=true
          kubectl apply -f ./ingress/01-cert-manager.crds.yaml

      - name: Deploy Prometheus and Grafana
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update prometheus-community
          helm install prometheus prometheus-community/kube-prometheus-stack --namespace sock-shop --create-namespace
      # cd ./manifests/monitoring/
      # bash deploy-monitoring.sh

      # - name: Deploy Alertmanager
      #   run: |
      #     cd ./manifests/alert-manager/
      #     bash deploy-alertmanager.sh

      - name: Deploy Nginx Ingress Controller, letsencrypt certificate and ingress
        run: |
          cd ./ingress
          kubectl apply -f 00-ingress-nginx.yaml
          kubectl apply -f 02-issuer-prod.yaml
          sleep 2m
          kubectl apply -f 03-main-ingress.yaml

      # - name: Delay
      #   run: sleep 120s

      # - name: Deploy Ingress Resources
      #   run: kubectl apply -f ingress.yml
